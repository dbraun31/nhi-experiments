head(new_d)
keep_three_selections <- function(d) {
indices <- c()
for (i in 1:(nrow(d))) {
if (d[i,]$selected_or_released == 'selected') {
indices <- c(indices, i)
}
if (length(indices) == 3) {
break
}
}
return(d[indices,])
}
sub_d <- select(d, subject, trial_count, selection_rt_ms, prompt_rt_ms, selected_or_released)
new_d <- data.frame(subject = c(), trial_count = c(), prompt_rt_ms = c(), selection_rt_ms = c())
for (subject in unique(sub_d$subject)) {
for (trial in unique(sub_d[sub_d$subject == subject,]$trial_count)) {
new_d <- rbind(new_d, keep_three_selections(sub_d[sub_d$subject == subject & d$trial_count == trial,]))
}
}
selection_rt_ms_avg <- mean(new_d$selection_rt_ms)
selection_rt_ms_sd <- sd(new_d$selection_rt_ms)
prompt_rt_ms_avg <- mean(new_d$prompt_rt_ms)
prompt_rt_ms_sd <- sd(new_d$prompt_rt_ms)
new_d <- new_d %>%
group_by(subject) %>%
summarize(selection_median = median(selection_rt_ms), prompt_median = median(prompt_rt_ms)) %>%
inner_join(new_d) %>%
rename(selection_rt_ms_raw = selection_rt_ms, prompt_rt_ms_raw = prompt_rt_ms) %>%
mutate(selection_rt_ms = ifelse(selection_rt_ms_raw >= selection_rt_ms_avg + 2*selection_rt_ms_sd | selection_rt_ms_raw <= selection_rt_ms_avg - 2*selection_rt_ms_sd, selection_median, selection_rt_ms_raw),
prompt_rt_ms = ifelse(prompt_rt_ms_raw >= prompt_rt_ms_avg + 2*prompt_rt_ms_sd | prompt_rt_ms_raw <= prompt_rt_ms_avg - 2*prompt_rt_ms_sd, prompt_median, prompt_rt_ms_raw)) %>%
select(-selection_rt_ms_raw, -prompt_rt_ms_raw, -selection_median, -prompt_median)
head(new_d)
click_levels = c()
for (i in 0:99) {
click_levels = c(click_levels, paste0('Trial', i, '_ClickOne'), paste0('Trial', i, '_ClickTwo'), paste0('Trial', i, '_ClickThree'))
}
prompt_levels <- paste0('Trial', 0:99, 'PromptRTMS')
t <- new_d %>%
mutate(trial_char = paste0('Trial', new_d$trial_count)) %>%
select(-selected_or_released, -prompt_rt_ms, -trial_count) %>%
mutate(click_count = rep(c('ClickOne', 'ClickTwo', 'ClickThree'), nrow(new_d) / 3)) %>%
unite(spreadable, trial_char, click_count, sep='_') %>%
mutate(spreadable = factor(spreadable, levels = click_levels)) %>%
spread(spreadable, selection_rt_ms)
t2 <- new_d %>%
group_by(subject, trial_count) %>%
summarize(prompt_rt_ms = unique(prompt_rt_ms)) %>%
mutate(trial_char = paste0('Trial', trial_count, 'PromptRTMS')) %>%
select(-trial_count) %>%
mutate(trial_char = factor(trial_char, levels = prompt_levels)) %>%
spread(trial_char, prompt_rt_ms)
cluster_d <- data.frame(cbind(t2, t[,colnames(t) != 'subject']))
rownames(cluster_d) <- cluster_d$subject
cluster_d <- cluster_d[,colnames(cluster_d) != 'subject']
cluster_d <- scale(cluster_d)
head(cluster_d[,1:10])
hc <- hclust(dist(cluster_d))
plot(hc)
#plot_d <-
cluster_d %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value))
#plot_d <-
data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value))
#plot_d <-
data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2()
#plot_d <-
data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank())
#plot_d <-
data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
library(grid)
hc <- hclust(dist(cluster_d), rotate = TRUE)
library(ggdendro)
install.packages('ggdendro')
library(ggdendro)
hc <- as.dendrogram(hclust(dist(cluster_d)))
dendro_plot <- ggdendrogram(data = hc, rotate = TRUE)
print(dendro_plot)
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = 0.445, width = 0.2, height = 1.0))
heatmap <- data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = 0.445, width = 0.2, height = 1.0))
heatmap <- data.frame(cluster_d) %>%
mutate(subject = rownames(cluster_d)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = 'bottom')
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = 0.445, width = 0.2, height = 1.0))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 1, y = 0.445, width = 0.2, height = 1.0))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .55, width = 0.2, height = 1.0))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .5, width = 0.2, height = 1.0))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .5, width = 0.2, height = .75))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .5, width = 0.2, height = .85))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .5, width = 0.2, height = .95))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .55, width = 0.2, height = .95))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .55, width = 0.2, height = .9))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .57, width = 0.2, height = .9))
dendro_plot <- ggdendrogram(data = hc, rotate = TRUE) +
theme(axis.text.x = element_blank())
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .57, width = 0.2, height = .9))
order.dendrogram(hc)
subject_order <- order.dendrogram(hc)
heatmap <- data.frame(cluster_d) %>%
mutate(subject = factor(rownames(cluster_d), levels = rownames(cluster_d)[subject_order], ordered = TRUE)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = 'bottom')
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .57, width = 0.2, height = .9))
library(gridExtra)
grid.arrange(heatmap, dendro_plot, nrow = 1)
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .57, width = 0.2, height = .9))
ggsave('heatmap.png', height = 1080, width = 1920, units = 'px')
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .57, width = 0.2, height = 1))
capture.output(print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.85, y = .57, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.85, y = .57, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.75, y = .57, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.75, y = .57, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.75, y = .57, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .52, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .52, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .52, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .54, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
head(t[,1:10])
## take only t data
t <- data.frame(t)
rownames(t) <- t$subject
t <- t[,colnames(t) != 'subject']
hc <- as.dendrogram(hclust(dist(t)))
#hc <- as.dendrogram(hclust(dist(cluster_d)))
dendro_plot <- ggdendrogram(data = hc, rotate = TRUE) +
theme(axis.text.x = element_blank())
print(dendro_plot)
subject_order <- order.dendrogram(hc)
heatmap <- data.frame(cluster_d) %>%
mutate(subject = factor(rownames(cluster_d), levels = rownames(cluster_d)[subject_order], ordered = TRUE)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time',
y = 'Subject'
) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = 'bottom')
library(gridExtra)
grid.arrange(heatmap, dendro_plot, nrow = 1)
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
subject_order <- order.dendrogram(hc)
heatmap <- data.frame(cluster_d) %>%
mutate(subject = factor(rownames(cluster_d), levels = rownames(cluster_d)[subject_order], ordered = TRUE)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time in Experiment',
y = 'Subject',
fill = 'Standarized Line Click RT'
) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
legend.position = 'bottom')
library(gridExtra)
grid.arrange(heatmap, dendro_plot, nrow = 1)
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
q()
install.packages('ggdendro')
library(tidyverse)
library(data.table)
library(grid)
library(ggdendro)
d <- read.csv('../../data/exp1_long_data_raw.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
if (!'accuracy_type' %in% colnames(d)) {
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
}
N <- length(unique(d$participant))
head(d)
head(thinnest_lines)
colnames(d)[which(colnames(d) == 'participant')] <- 'subject'
compute_accuracy_columns()
compute_accuracy_columns
d <- read.csv('../../data/exp1_long_data_raw.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
if (!'accuracy_type' %in% colnames(d)) {
source('../compute_accuracy_columns.r')
out <- compute_accuracy_columns(d, thinnest_lines)
}
head(out)
str(out)
d <- out[[1]]
thinnest_lines <- out[[2]]
head(d)
library(tidyverse)
library(data.table)
library(grid)
library(ggdendro)
d <- read.csv('../../data/exp1_long_data_raw.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
if (!'accuracy_type' %in% colnames(d)) {
source('../compute_accuracy_columns.r')
out <- compute_accuracy_columns(d, thinnest_lines)
}
d <- out[[1]]
thinnest_lines <- out[[2]]
N <- length(unique(d$participant))
head(d)
head(thinnest_lines)
colnames(d)[which(colnames(d) == 'participant')] <- 'subject'
colnames(d)[which(colnames(d) == 'selection_rt_ms')] <- 'selection_rt_ms_absolute'
d$selection_rt_ms <- ifelse(shift(d$trial_count) == d$trial_count, d$selection_rt_ms_absolute - shift(d$selection_rt_ms_absolute), d$selection_rt_ms_absolute)
d$selection_rt_ms[1] <- d$selection_rt_ms_absolute[1]
d$prompt_rt_ms <- d$prompt_rt_sec * 1000
keep_three_selections <- function(d) {
indices <- c()
for (i in 1:(nrow(d))) {
if (d[i,]$selected_or_released == 'selected') {
indices <- c(indices, i)
}
if (length(indices) == 3) {
break
}
}
return(d[indices,])
}
sub_d <- select(d, subject, trial_count, selection_rt_ms, prompt_rt_ms, selected_or_released)
new_d <- data.frame(subject = c(), trial_count = c(), prompt_rt_ms = c(), selection_rt_ms = c())
for (subject in unique(sub_d$subject)) {
for (trial in unique(sub_d[sub_d$subject == subject,]$trial_count)) {
new_d <- rbind(new_d, keep_three_selections(sub_d[sub_d$subject == subject & d$trial_count == trial,]))
}
}
selection_rt_ms_avg <- mean(new_d$selection_rt_ms)
selection_rt_ms_sd <- sd(new_d$selection_rt_ms)
prompt_rt_ms_avg <- mean(new_d$prompt_rt_ms)
prompt_rt_ms_sd <- sd(new_d$prompt_rt_ms)
new_d <- new_d %>%
group_by(subject) %>%
summarize(selection_median = median(selection_rt_ms), prompt_median = median(prompt_rt_ms)) %>%
inner_join(new_d) %>%
rename(selection_rt_ms_raw = selection_rt_ms, prompt_rt_ms_raw = prompt_rt_ms) %>%
mutate(selection_rt_ms = ifelse(selection_rt_ms_raw >= selection_rt_ms_avg + 2*selection_rt_ms_sd | selection_rt_ms_raw <= selection_rt_ms_avg - 2*selection_rt_ms_sd, selection_median, selection_rt_ms_raw),
prompt_rt_ms = ifelse(prompt_rt_ms_raw >= prompt_rt_ms_avg + 2*prompt_rt_ms_sd | prompt_rt_ms_raw <= prompt_rt_ms_avg - 2*prompt_rt_ms_sd, prompt_median, prompt_rt_ms_raw)) %>%
select(-selection_rt_ms_raw, -prompt_rt_ms_raw, -selection_median, -prompt_median)
click_levels = c()
for (i in 0:99) {
click_levels = c(click_levels, paste0('Trial', i, '_ClickOne'), paste0('Trial', i, '_ClickTwo'), paste0('Trial', i, '_ClickThree'))
}
prompt_levels <- paste0('Trial', 0:99, 'PromptRTMS')
head(click_levels)
t <- new_d %>%
mutate(trial_char = paste0('Trial', new_d$trial_count)) %>%
select(-selected_or_released, -prompt_rt_ms, -trial_count) %>%
mutate(click_count = rep(c('ClickOne', 'ClickTwo', 'ClickThree'), nrow(new_d) / 3)) %>%
unite(spreadable, trial_char, click_count, sep='_') %>%
mutate(spreadable = factor(spreadable, levels = click_levels)) %>%
spread(spreadable, selection_rt_ms)
t2 <- new_d %>%
group_by(subject, trial_count) %>%
summarize(prompt_rt_ms = unique(prompt_rt_ms)) %>%
mutate(trial_char = paste0('Trial', trial_count, 'PromptRTMS')) %>%
select(-trial_count) %>%
mutate(trial_char = factor(trial_char, levels = prompt_levels)) %>%
spread(trial_char, prompt_rt_ms)
cluster_d <- data.frame(cbind(t2, t[,colnames(t) != 'subject']))
rownames(cluster_d) <- cluster_d$subject
cluster_d <- cluster_d[,colnames(cluster_d) != 'subject']
cluster_d <- scale(cluster_d)
head(cluster_d)
ncol(cluster_d)
nrow(cluster_d)
N
t <- new_d %>%
mutate(trial_char = paste0('Trial', new_d$trial_count)) %>%
select(-selected_or_released, -prompt_rt_ms, -trial_count) %>%
mutate(click_count = rep(c('ClickOne', 'ClickTwo', 'ClickThree'), nrow(new_d) / 3)) %>%
unite(spreadable, trial_char, click_count, sep='_') %>%
mutate(spreadable = factor(spreadable, levels = click_levels)) %>%
spread(spreadable, selection_rt_ms)
t2 <- new_d %>%
group_by(subject, trial_count) %>%
summarize(prompt_rt_ms = unique(prompt_rt_ms)) %>%
mutate(trial_char = paste0('Trial', trial_count, 'PromptRTMS')) %>%
select(-trial_count) %>%
mutate(trial_char = factor(trial_char, levels = prompt_levels)) %>%
spread(trial_char, prompt_rt_ms)
head(t1)
head(t)
## take only t data
t <- data.frame(t)
rownames(t) <- t$subject
t <- t[,colnames(t) != 'subject']
hc <- as.dendrogram(hclust(dist(t)))
#hc <- as.dendrogram(hclust(dist(cluster_d)))
dendro_plot <- ggdendrogram(data = hc, rotate = TRUE) +
theme(axis.text.x = element_blank())
print(dendro_plot)
subject_order <- order.dendrogram(hc)
heatmap <- data.frame(cluster_d) %>%
mutate(subject = factor(rownames(cluster_d), levels = rownames(cluster_d)[subject_order], ordered = TRUE)) %>%
gather(measure, value, Trial0PromptRTMS:Trial99_ClickThree) %>%
ggplot(aes(x = measure, y = subject)) +
geom_tile(aes(fill = value)) +
scale_fill_gradient2() +
labs(
x = 'Time in Experiment',
y = 'Subject',
fill = 'Standarized Line Click RT'
) +
theme_bw() +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
legend.position = 'bottom')
library(gridExtra)
grid.arrange(heatmap, dendro_plot, nrow = 1)
grid.newpage()
print(heatmap,
vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(dendro_plot,
vp = viewport(x = 0.90, y = .53, width = 0.2, height = 1))
q()
