ggplot(aes(x = line_orientation, y = mean_selection_rate)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = mean_selection_rate - se, ymax = mean_selection_rate + se), width = .5) +
labs(
x = 'Line Orientation',
y = 'Mean Selection Rate'
) +
theme_bw() +
facet_wrap(~experiment)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
labs(
y = 'Count',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('line_orientation.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
head(line_data)
top_left <- c(min(line_data$top_x), max(line_data$top_y))
top_right <- c(max(line_data$top_x), max(line_data$top_y))
bottom_left <- c(min(line_data$bottom_x), min(line_data$bottom_y))
bottom_right <- c(max(line_data$bottom_x), min(line_data$bottom_y))
print(top_left)
print(top_right)
print(bottom_left)
print(bottom_right)
center <- c(mean(c(top_left[1], top_right[1])), mean(c(top_left[2], bottom_left[2])))
center
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data %>%
filter(participant == 1, trial_count == 0, is_exterior == 'False') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
d %>%
filter(!(is.na(quadrant))) %>%
group_by(participant, quadrant, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant) %>%
summarize(mean_trials = mean(count)) %>%
ggplot(aes(x = quadrant, y = mean_trials)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Mean Frequency Selected across Participants'
) +
facet_wrap(~experiment)
d %>%
filter(!(is.na(quadrant))) %>%
group_by(participant, quadrant, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant,experiment) %>%
summarize(mean_trials = mean(count)) %>%
ggplot(aes(x = quadrant, y = mean_trials)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Mean Frequency Selected across Participants'
) +
facet_wrap(~experiment)
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant, accuracy_type, experiment) %>%
summarize(mean_count = mean(count), se_count = sd(count) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_count, group = accuracy_type)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_count - se_count, ymax = mean_count + se_count, group = accuracy_type), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'Average Across Participants',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment)
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data %>%
filter(participant == 1, trial_count == 0, is_exterior == 'False') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
d %>%
filter(!(is.na(quadrant))) %>%
group_by(participant, quadrant, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant,experiment) %>%
summarize(mean_trials = mean(count)) %>%
ggplot(aes(x = quadrant, y = mean_trials)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Mean Frequency Selected across Participants'
) +
facet_wrap(~experiment)
theme_bw()
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant, accuracy_type, experiment) %>%
summarize(mean_count = mean(count), se_count = sd(count) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_count, group = accuracy_type)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_count - se_count, ymax = mean_count + se_count, group = accuracy_type), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'Average Across Participants',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment)
theme_bw() +
theme(legend.position = 'bottom')
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
line_data %>%
filter(participant == 50, trial_count == 0, is_exterior == 'False') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data %>%
filter(participant == 50, trial_count == 0, is_exterior == 'False') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
d %>%
filter(!(is.na(quadrant))) %>%
group_by(participant, quadrant, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant,experiment) %>%
summarize(mean_trials = mean(count)) %>%
ggplot(aes(x = quadrant, y = mean_trials)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Mean Frequency Selected across Participants'
) +
facet_wrap(~experiment) +
theme_bw()
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant, accuracy_type, experiment) %>%
summarize(mean_count = mean(count), se_count = sd(count) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_count, group = accuracy_type)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_count - se_count, ymax = mean_count + se_count, group = accuracy_type), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'Average Across Participants',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data %>%
filter(participant == 50, trial_count == 0, is_exterior == 'False') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
d %>%
filter(!(is.na(quadrant))) %>%
group_by(participant, quadrant, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant,experiment) %>%
summarize(mean_trials = mean(count)) %>%
ggplot(aes(x = quadrant, y = mean_trials)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Mean Frequency Selected across Participants'
) +
facet_wrap(~experiment) +
theme_bw() +
theme(strip.background = element_rect(color = 'black', fill = 'white'))
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type, experiment) %>%
summarize(count = n()) %>%
group_by(quadrant, accuracy_type, experiment) %>%
summarize(mean_count = mean(count), se_count = sd(count) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_count, group = accuracy_type)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_count - se_count, ymax = mean_count + se_count, group = accuracy_type), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'Average Across Participants',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment) +
theme_bw() +
theme(legend.position = 'bottom',
strip.background = element_rect(color = 'black', fill = 'white'))
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
q()
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines$experiment <- 'experiment1'
thinnest_lines <- rbind(thinnest_lines, e1_thinnest_lines)
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- d %>%
group_by(participant) %>%
summarize(n()) %>%
nrow()
q()
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines$experiment <- 'experiment1'
thinnest_lines <- rbind(thinnest_lines, e1_thinnest_lines)
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- d %>%
group_by(participant) %>%
summarize(n()) %>%
nrow()
calc_accuracy_columns <- function(data) {
participant <- data$participant[1]
trial <- data$trial_count[1]
thinnest_lines_set <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]$line_id
## determine the final three lines they selected
## some extra logic to assign NA to any lines that were selected and later released
selected_lines <- c(NA, NA, NA)
indices <- c(NA, NA, NA)
for (row in 1:(nrow(data))) {
if (data[row,]$selected_or_released == 'selected') {
slot <- which(is.na(selected_lines))[1]
selected_lines[slot]<- data[row,]$line_id
indices[slot] <- row
} else if (data[row,]$selected_or_released == 'released'){
slot <- which(!(is.na(selected_lines)) & selected_lines == data[row,]$line_id)
selected_lines[slot] <- NA
indices[slot] <- NA
}
}
selected_lines_accuracy_column <- rep(NA, nrow(data))
accuracy_code <- ifelse(selected_lines %in% thinnest_lines_set, 'hit', 'false_alarm')
selected_lines_accuracy_column[indices] <- accuracy_code
return(selected_lines_accuracy_column)
}
out  <- vector()
for (participant in sapply(unique(d$participant), as.integer)) {
for (trial in 0:99) {
out <- c(out, calc_accuracy_columns(d[d$participant == participant & d$trial_count == trial,]))
}
}
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
q()
library(tidyverse)
library(testit)
library(psycho)
install.packages('psycho')
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines$experiment <- 'experiment1'
thinnest_lines <- rbind(thinnest_lines, e1_thinnest_lines)
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- d %>%
group_by(participant) %>%
summarize(n()) %>%
nrow()
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
## save out plotting data for opam abstract
write.csv(d, 'e1_2.csv', row.names = FALSE)
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
q()
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines$experiment <- 'experiment1'
thinnest_lines <- rbind(thinnest_lines, e1_thinnest_lines)
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- d %>%
group_by(participant) %>%
summarize(n()) %>%
nrow()
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
## save out plotting data for opam abstract
write.csv(summary_data, 'e1_2.csv', row.names = FALSE)
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
d$experiment <- 'experiment2'
e1 <- read.csv('../../../exp1/data/exp1_long_data.csv')
e1$experiment <- 'experiment1'
d <- rbind(d, e1)
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
thinnest_lines$experiment <- 'experiment2'
e1_thinnest_lines <- read.csv('../../../exp1/data/thinnest_lines.csv')
e1_thinnest_lines$experiment <- 'experiment1'
thinnest_lines <- rbind(thinnest_lines, e1_thinnest_lines)
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- d %>%
group_by(participant) %>%
summarize(n()) %>%
nrow()
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
line_data %>%
filter(participant == 50, trial_count == 0) %>%
group_by(line_orientation) %>%
summarize(count = n())
## summarize misses
thinnest_lines <- d %>%
filter(pressed_object == 'submit') %>%
select(participant, trial_count, accuracy) %>%
inner_join(thinnest_lines)
summary_data <- thinnest_lines %>%
filter(accuracy != 1) %>%
group_by(line_orientation, experiment) %>%
summarize(misses = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, misses:false_alarms)
d %>%
filter(selected_or_released == 'selected') %>%
group_by(participant, line_orientation, experiment) %>%
summarize(count = n()) %>%
group_by(line_orientation, experiment) %>%
summarize(mean_selection_rate = mean(count), se = sd(count) / sqrt(length(unique(d$participant)))) %>%
ggplot(aes(x = line_orientation, y = mean_selection_rate)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = mean_selection_rate - se, ymax = mean_selection_rate + se), width = .5) +
labs(
x = 'Line Orientation',
y = 'Mean Selection Rate'
) +
theme_bw() +
facet_wrap(~experiment)
write.csv(summary_data, 'e1_2.csv', row.names = FALSE)
summary_data %>%
ggplot(aes(x = line_orientation, y = count)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
labs(
y = 'Count',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
facet_wrap(~experiment) +
theme_bw() +
theme(legend.position = 'bottom',
strip.background = element_rect(color = 'black', fill = 'white'))
q()
