summarize(hits = sum(hit), false_alarms = sum(false_alarm))
head(d)
source('../compute_accuracy_columns.r')
result <- compute_accuracy_columns(d, thinnest_lines)
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- length(unique(d$participant))
source('../compute_accuracy_columns.r')
result <- compute_accuracy_columns(d, thinnest_lines)
d <- result[[1]]
thinnest_lines <- result[[2]]
## a function for spot checking accuracy coding throughout the data
spot_check <- function() {
participant <- sample(d$participant, size = 1)
trial <- sample(d[d$participant==participant,]$trial_count, size = 1)
d_sub <- d[d$participant == participant & d$trial_count == trial,]
t_sub <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]
print('Subset of long data:')
print(d_sub[,c('line_id', 'selected_or_released', 'accuracy_type')])
print(' ')
print(' ')
print('Subset of thinnest lines data:')
print(t_sub[,c('line_width', 'line_id', 'accuracy_type')])
}
## Anything coded as a "hit" in the long data should be represented in the thinnest lines data
## Anything coded as a "false alarm" shouldn't be represented in the thinnest lines data
spot_check()
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- length(unique(d$participant))
source('../compute_accuracy_columns.r')
result <- compute_accuracy_columns(d, thinnest_lines)
d <- result[[1]]
thinnest_lines <- result[[2]]
## a function for spot checking accuracy coding throughout the data
spot_check <- function() {
participant <- sample(d$participant, size = 1)
trial <- sample(d[d$participant==participant,]$trial_count, size = 1)
d_sub <- d[d$participant == participant & d$trial_count == trial,]
t_sub <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]
print('Subset of long data:')
print(d_sub[,c('line_id', 'selected_or_released', 'accuracy_type')])
print(' ')
print(' ')
print('Subset of thinnest lines data:')
print(t_sub[,c('line_width', 'line_id', 'accuracy_type')])
}
## Anything coded as a "hit" in the long data should be represented in the thinnest lines data
## Anything coded as a "false alarm" shouldn't be represented in the thinnest lines data
spot_check()
## summarize hits and false alarms
summary_data <- d %>%
filter(!(is.na(accuracy_type))) %>%
mutate(hit = ifelse(accuracy_type == 'hit', 1, 0), false_alarm = ifelse(accuracy_type == 'false_alarm', 1, 0)) %>%
group_by(participant, line_orientation) %>%
summarize(hits = sum(hit), false_alarms = sum(false_alarm))
line_data %>%
filter(participant == 10, trial_count == 2) %>%
group_by(line_orientation) %>%
summarize(count = n())
## summarize misses
summary_data_p <- thinnest_lines %>%
filter(accuracy_type == 'miss') %>%
group_by(participant, line_orientation) %>%
summarize(miss_count = n()) %>%
inner_join(summary_data) %>%
gather(accuracy_type, count, miss_count:false_alarms)
summary_data <- summary_data_p %>%
group_by(line_orientation, accuracy_type) %>%
summarize(m = mean(count), se = sd(count) / sqrt(N))
## export in long format so they can work with it for the poster
write.csv(summary_data_p, 'line_orientation.csv', row.names = FALSE)
## broken down by accuracy type
summary_data %>%
ggplot(aes(x = line_orientation, y = m)) +
geom_bar(stat = 'identity', aes(fill = accuracy_type), position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = m - se, ymax = m + se, group = accuracy_type), position = position_dodge(width = .9), width = .5) +
labs(
y = 'Mean Frequency',
x = 'Line Orientation',
fill = 'Accuracy Type'
) +
theme_bw() +
theme(legend.position = 'bottom')
d %>%
filter(!is.na(accuracy_type)) %>%
group_by(participant, line_orientation, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit = ifelse(is.na(hit), 0, hit), false_alarm = ifelse(is.na(false_alarm), 0, false_alarm)) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(hit_rate = min(.999, hit_rate)) %>%
mutate(fa_rate = 1 - hit_rate) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(fa_rate)) %>%
group_by(line_orientation) %>%
summarize(dp_mean = mean(d_prime), se = sd(d_prime) / sqrt(N)) %>%
ggplot(aes(x = line_orientation, y = dp_mean)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = dp_mean - se, ymax = dp_mean + se), width = .5) +
labs(
x = 'Line Orientation',
y = "Mean d'"
) +
theme_bw()
ggsave('line_orientation.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
line_data <- read.csv('../../data/exp1_line_data.csv')
line_data <- read.csv('../../data/exp2_line_data.csv')
head(line_data)
top_left <- c(min(line_data$top_x), max(line_data$top_y))
top_right <- c(max(line_data$top_x), max(line_data$top_y))
bottom_left <- c(min(line_data$bottom_x), min(line_data$bottom_y))
bottom_right <- c(max(line_data$bottom_x), min(line_data$bottom_y))
print(top_left)
print(top_right)
print(bottom_left)
print(bottom_right)
center <- c(mean(c(top_left[1], top_right[1])), mean(c(top_left[2], bottom_left[2])))
center
source('../compute_quadrants.r')
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
## append line coordinates to thinnest lines data (for including misses in summarization)
line_data %>%
filter(participant == 1, trial_count == 0, is_exterior == 'False', line_orientation != 'vertical') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
d %>%
filter(!(is.na(quadrant)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant) %>%
summarize(count = n()) %>%
## im not sure whether this makes sense
mutate(proportion = ifelse(quadrant == 'x_axis', count / (6*300), count / (3*300))) %>%
group_by(quadrant) %>%
## add in SEs
summarize(mean_proportion = mean(proportion), se = sd(proportion) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_proportion)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = mean_proportion - se, ymax = mean_proportion + se), width = .5) +
labs(
x = 'Quadrant',
y = 'Mean Proportion Selection'
) +
theme_bw()
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime), se = sd(d_prime) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_dprime)) +
geom_bar(stat = 'identity', position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_dprime - se, ymax = mean_dprime + se), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'd prime'
) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(hit_rate = ifelse(hit_rate == 1, .99999, hit_rate)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime), se = sd(d_prime) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_dprime)) +
geom_bar(stat = 'identity', position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_dprime - se, ymax = mean_dprime + se), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'd prime'
) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type))) %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(hit_rate = ifelse(hit_rate == 1, .99999, hit_rate)) %>%
head()
q()
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
thinnest_lines <- read.csv('../../data/thinnest_lines.csv')
library(tidyverse)
library(testit)
library(psycho)
d <- read.csv('../../data/exp2_long_data.csv')
thinnest_lines <- read.csv('../../data/exp2_thinnest_lines.csv')
line_data <- read.csv('../../data/exp2_line_data.csv')
head(d)
N <- length(unique(d$participant))
source('../compute_accuracy_columns.r')
result <- compute_accuracy_columns(d, thinnest_lines)
d <- result[[1]]
thinnest_lines <- result[[2]]
## a function for spot checking accuracy coding throughout the data
spot_check <- function() {
participant <- sample(d$participant, size = 1)
trial <- sample(d[d$participant==participant,]$trial_count, size = 1)
d_sub <- d[d$participant == participant & d$trial_count == trial,]
t_sub <- thinnest_lines[thinnest_lines$participant == participant & thinnest_lines$trial_count == trial,]
print('Subset of long data:')
print(d_sub[,c('line_id', 'selected_or_released', 'accuracy_type')])
print(' ')
print(' ')
print('Subset of thinnest lines data:')
print(t_sub[,c('line_width', 'line_id', 'accuracy_type')])
}
## Anything coded as a "hit" in the long data should be represented in the thinnest lines data
## Anything coded as a "false alarm" shouldn't be represented in the thinnest lines data
spot_check()
line_data <- read.csv('../../data/exp2_line_data.csv')
head(line_data)
top_left <- c(min(line_data$top_x), max(line_data$top_y))
top_right <- c(max(line_data$top_x), max(line_data$top_y))
bottom_left <- c(min(line_data$bottom_x), min(line_data$bottom_y))
bottom_right <- c(max(line_data$bottom_x), min(line_data$bottom_y))
print(top_left)
print(top_right)
print(bottom_left)
print(bottom_right)
center <- c(mean(c(top_left[1], top_right[1])), mean(c(top_left[2], bottom_left[2])))
center
source('../compute_quadrants.r')
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
## append line coordinates to thinnest lines data (for including misses in summarization)
line_data %>%
filter(participant == 1, trial_count == 0, is_exterior == 'False', line_orientation != 'vertical') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
clean_data <- d %>%
filter(!(is.na(quadrant)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant) %>%
summarize(count = n()) %>%
## im not sure whether this makes sense
mutate(proportion = ifelse(quadrant == 'x_axis', count / (6*300), count / (3*300)))
write.csv(clean_data, 'exp2_quadrant_by_subject.csv', row.names = FALSE)
clean_data %>%
group_by(quadrant) %>%
## add in SEs
summarize(mean_proportion = mean(proportion), se = sd(proportion) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_proportion)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = mean_proportion - se, ymax = mean_proportion + se), width = .5) +
labs(
x = 'Quadrant',
y = 'Mean Proportion Selection'
) +
theme_bw()
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime), se = sd(d_prime) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_dprime)) +
geom_bar(stat = 'identity', position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_dprime - se, ymax = mean_dprime + se), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'd prime'
) +
theme_bw() +
theme(legend.position = 'bottom')
ggsave('accuracy_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
head(d)
line_data %>%
filter(participant == 27, trial_count == 1, is_exterior == 'False', line_orientation != 'vertical') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
head(d)
source('../compute_quadrants.r')
## calculate line centers
d <- d %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
line_data <- line_data %>%
mutate(line_center_x = (top_x + bottom_x) / 2, line_center_y = (top_y + bottom_y) / 2) %>%
mutate(quadrant = ifelse(line_center_x > center[1] & line_center_y > center[2], 'I', ifelse(line_center_x < center[1] & line_center_y > center[2], 'II',
ifelse(line_center_x < center[1] & line_center_y < center[2], 'III', ifelse(line_center_x > center[1] & line_center_y < center[2], 'IV', '')))))
## append line coordinates to thinnest lines data (for including misses in summarization)
line_data %>%
filter(participant == 27, trial_count == 1, is_exterior == 'False', line_orientation != 'vertical') %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis)) %>%
group_by(quadrant) %>%
summarize(count = n()) %>%
ggplot(aes(x = quadrant, y = count)) +
geom_bar(stat = 'identity') +
labs(
x = 'Quadrant',
y = 'Number of Lines per Trial'
) +
theme_bw()
ggsave('lines_per_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d <- d %>%
mutate(x_dist = abs(line_center_x - center[1]), y_dist = abs(line_center_y - center[2])) %>%
mutate(is_on_axis = ifelse(x_dist < 0.1, 'y_axis', ifelse(y_dist < 0.1, 'x_axis', ''))) %>%
mutate(quadrant = ifelse(is_on_axis == '', quadrant, is_on_axis))
clean_data <- d %>%
filter(!(is.na(quadrant)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant) %>%
summarize(count = n()) %>%
## im not sure whether this makes sense
mutate(proportion = ifelse(quadrant == 'x_axis', count / (6*300), count / (3*300)))
write.csv(clean_data, 'exp2_quadrant_by_subject.csv', row.names = FALSE)
clean_data %>%
group_by(quadrant) %>%
## add in SEs
summarize(mean_proportion = mean(proportion), se = sd(proportion) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_proportion)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymin = mean_proportion - se, ymax = mean_proportion + se), width = .5) +
labs(
x = 'Quadrant',
y = 'Mean Proportion Selection'
) +
theme_bw()
ggsave('selection_by_quadrant.png', height = 1080 / 300, width = 1920 / 300, units = 'in', dpi = 300)
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
head()
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime), se = sd(d_prime) / sqrt(N)) %>%
head()
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime, na.rm = TRUE), se = sd(d_prime, na.rm = TRUE) / sqrt(N)) %>%
head()
d %>%
filter(!(is.na(quadrant)), !(is.na(top_x)), !(is.na(accuracy_type)), line_orientation != 'vertical') %>%
group_by(participant, quadrant, accuracy_type) %>%
summarize(count = n()) %>%
spread(accuracy_type, count) %>%
mutate(hit_rate = hit / (hit + false_alarm)) %>%
mutate(d_prime = qnorm(hit_rate) - qnorm(1 - hit_rate)) %>%
group_by(quadrant) %>%
summarize(mean_dprime = mean(d_prime, na.rm = TRUE), se = sd(d_prime, na.rm = TRUE) / sqrt(N)) %>%
ggplot(aes(x = quadrant, y = mean_dprime)) +
geom_bar(stat = 'identity', position = position_dodge(width = .9)) +
geom_errorbar(aes(ymin = mean_dprime - se, ymax = mean_dprime + se), width = .5, position = position_dodge(.9)) +
labs(
x = 'Quadrant',
y = 'd prime'
) +
theme_bw() +
theme(legend.position = 'bottom')
q()
library(tidyverse)
library(data.table)
library(ggridges)
d <- read.csv('../../data/exp2_long_data.csv')
thinnest_lines <- read.csv('../../data/exp2_thinnest_lines.csv')
if (!'accuracy_type' %in% colnames(d)) {
source('../compute_accuracy_columns.r')
d <- compute_accuracy_columns(d, thinnest_lines)
}
N <- length(unique(d$participant))
head(d)
colnames(d)[which(colnames(d) == 'participant')] <- 'subject'
click_summary <- d %>%
group_by(subject, trial_count) %>%
summarize(count = n()) %>%
filter(count == 4) %>%
select(-count) %>%
mutate(key = 'keep')
d <- d %>%
inner_join(click_summary) %>%
filter(key == 'keep', is.na(accuracy)) %>%
select(-key)
d$selection_rt_ms_relative <- ifelse(shift(d$click_order) < d$click_order, d$selection_rt_ms - shift(d$selection_rt_ms), d$selection_rt_ms)
d$selection_rt_ms_relative[1] <- d$selection_rt_ms[1]
d$accuracy_numeric <- ifelse(d$accuracy_type == 'hit', 1, 0)
write.csv(d, 'exp2_trial_clicking.csv', row.names = FALSE)
subject_summary <- d %>%
group_by(subject, click_order) %>%
summarize(RT = mean(selection_rt_ms_relative), Accuracy = mean(accuracy_numeric))
write.csv(subject_summary, 'exp2_group_clicking.csv', row.names = FALSE)
subject_summary %>%
gather(outcome, value, RT:Accuracy) %>%
ggplot(aes(x = value, y = click_order, group = click_order)) +
geom_density_ridges(fill = 'steel blue', alpha = .8) +
facet_wrap(~outcome, scales = 'free') +
labs(
x = '',
y = 'Click Order'
) +
theme_bw() +
theme(strip.background = element_rect(color = 'black', fill = 'white'))
## this computation includes in selection time the time it took them to press the submit button
## also im including line releases
d <- read.csv('../../data/exp2_long_data.csv')
colnames(d)[colnames(d) == 'participant'] <- 'subject'
out <- d %>%
group_by(subject) %>%
summarize(prompt_rt_sec = mean(prompt_rt_sec), selection_rt_ms = mean(selection_rt_ms), accuracy = mean(accuracy, na.rm = TRUE))
write.csv(out, 'exp2_individual_clicking.csv', row.names = FALSE)
out %>%
ggplot(aes(x = selection_rt_ms/1000, y = prompt_rt_sec)) +
geom_point(aes(color = accuracy)) +
labs(
x = 'Line Selection RT (s)',
y = 'View Period RT (s)',
color = 'Accuracy',
caption = 'Each point represents one participant'
) +
theme_bw()
q()
q()
